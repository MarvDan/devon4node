:toc: macro

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

= GraphQL on Devon4Node

=== Database setup

First of all we are going to setup a mongo database to work with, we are not going to get in details with this so you can go to the  https://docs.nestjs.com/techniques/mongodb[Nestjs documentation] to find more.

First we need to install a couple of dependencies:

[source,bash]
----
yarn add @nestjs/mongoose mongoose
yarn add -D @types/mongoose
----

And add MongooseModule to `app.module.ts`

[source,typescript]
----
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';

@Module({
  imports: [
    MongooseModule.forRoot('mongodb://localhost:27017'),
  ],
})
export class AppModule {}
----

Now let's create our schema, inside `todos/schemas` we are going to create a file `todo.schema.ts` with: 

[source,typescript]
----
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';

@Schema()
export class Todo extends Document {
  @Prop()
  id!: number;

  @Prop()
  task: string | undefined;

  @Prop()
  status: boolean | undefined;
}

export const TodoSchema = SchemaFactory.createForClass(Todo);
----

Then import it on `todo.module.ts`.

[source,typescript]
----
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { Todo, TodoSchema } from './schemas/todo.schema';

@Module({
  imports: [MongooseModule.forFeature([{ name: Todo.name, schema: TodoSchema }])]
})
export class TodosModule {}
----

=== Service

To interact with the database we need a service, first we create a module with `devon4node generate module todos` and inside create the service `todos.service.ts`.

[source,typescript]
----
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Todo } from './schemas/todo.schema';

@Injectable()
export class TodosService {
  constructor(@InjectModel(Todo.name) private readonly todoModel: Model<Todo>) {}

  async create(task: string): Promise<Todo> {
    const object = {
      task: task,
    }
    const createdTodo = new this.todoModel(object);
    return createdTodo.save();
  }

  async findAll(): Promise<Todo[]> {
    return this.todoModel.find().exec();
  }
}
----

To finish this section we need to create the corresponding schema on `todos/schemas/todo.schema`:

[source,typescript]
----
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';

@Schema()
export class Todo extends Document {
  @Prop()
  id: number;

  @Prop()
  task: string;

  @Prop()
  status: boolean;
}

export const TodoSchema = SchemaFactory.createForClass(Todo);
----

=== GraphQL

To install it:

[source,bash]
----
yarn add @nestjs/graphql graphql-tools graphql apollo-server-express
----

=== Schema first
This tutorial uses the schema first method.

First we need to import GraphQLModule to our `app.module.ts`.

[source,typescript]
----
...
import { GraphQLModule } from '@nestjs/graphql';
import { join } from 'path';

@Module({
  imports: [
    ...
    GraphQLModule.forRoot({
      typePaths: ['./**/*.graphql'],
      definitions: {
        path: join(process.cwd(), 'src/graphql.ts'),
        outputAs: 'class',
      },
    }),
  ],
})
export class AppModule {}
----

The `typePaths` indicates the location of the schema definition files.

The `definitions` indicates the file where the typescript definitions, adding the `outputAs: 'class'` saves those definitions as classes.

==== Resolver

Resolvers has the instructions to turn graphQL orders into the data requested.

To create a resolver we go to todos module and then create a new `todos.resolver.ts` file, import the decorators needed and set our resolver.

[source,typescript]
----
import { Resolver, Args, Mutation, Query } from '@nestjs/graphql';
import { TodosService } from './services/todos.service';
import { Todo } from './schemas/todo.schema';

@Resolver()
export class TodosResolver {
  constructor(private readonly todosService: TodosService) {}

  @Query()
  findAll(): Promise<Todo[]> {
    return this.todosService.findAll();
  }
  @Mutation()
  createTodo(@Args('task') task: string): Promise<Todo> {
    return this.todosService.create(task);
  }
}

----

`@Resolver()` indicates that the next class is a resolver.

`@Query` is used to get data.

`@Mutation` is used to create or modify data.

The `@mutation` will create the next schema in or autogenerated schema file:
[source,typescript]
----
type Mutation {
    createTodo( task: String ): Todo
}
----

And the `@Query` would do the same:
[source,typescript]
----
type Query {
    todos: [Todo]
}
----

Here we have also an argument decorator `@Args` which is an object with the arguments passed into the field in the query.

Learn more about resolvers, mutations and their argument decorators on the https://docs.nestjs.com/graphql/resolvers#schema-first[NestJS documentation].


Now start the server and go to `http://localhost:3000/graphql` you should see a playground, here you can test your resolvers.

For try querys you only need to write a json with what you need:

[source,typescript]
----
{
  findAll{
    task
  }
}
----

To test the mutation you can:

[source,typescript]
----
mutation{
  createTodo (
    task: "aasas"
  ){
    id, task
  }
}
----
